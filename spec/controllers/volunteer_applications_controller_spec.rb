require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe VolunteerApplicationsController do

  # This should return the minimal set of attributes required to create a valid
  # VolunteerApplication. As you add validations to VolunteerApplication, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { {  } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # VolunteerApplicationsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before do
    @user = User.create(:first_name => "First", :last_name => "Last", :email => "email@email.com", :password => "12345678")
    sign_in @user
    Timecop.freeze DateTime.parse("March 30th 2015")
  end

  describe "GET volunteer" do
    it "renders the Volunteer register page" do
      get :volunteer, :id => @user.id
      expect(response).to render_template("volunteer")
    end
  end

  describe "Valid POST newVolunteer" do
    before do
      post :newVolunteer, :id => @user.id, :volunteer => {:street_address => "2020 Kittredege Street",
                                                          :city => "Berkeley",
                                                          :zip_code => "95843",
                                                          :phone => "9168357434",
                                                          :company => "Blah"}
    end

    it "assigns @user" do
      expect(assigns(:user)).to eq(@user)
    end

    it "assigns @valid" do
      expect(assigns(:valid)).to eq(true)
    end

    it "assigns flash[:notice]" do
      expect(flash[:notice]).to eq("Successfully signed up!")
    end

    it "redirects to landing" do
      expect(response).to redirect_to('/')
    end
  end

  describe "Invalid POST newVolunteer" do
    before do
      post :newVolunteer, :id => @user.id, :volunteer => {:street_address => "2020 Kittredege Street",
                                                          :city => "Berkeley",
                                                          :zip_code => "95843",
                                                          :phone => "916",
                                                          :company => "Blah"}
    end

    it "assigns @user" do
      expect(assigns(:user)).to eq(@user)
    end

    it "assigns @valid" do
      expect(assigns(:valid)).to eq(false)
    end

    it "assigns flash[:notice]" do
      expect(flash[:alert]).to eq("Please check the format of your address and phone number")
    end

    it "redirects to landing" do
      expect(response).to redirect_to(user_new_volunteer_path)
    end
  end

end
